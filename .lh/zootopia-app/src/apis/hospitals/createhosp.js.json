{
    "sourceFile": "zootopia-app/src/apis/hospitals/createhosp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754845117468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754845652050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,40 @@\n-import api from '../api';\r\n+import axios from 'axios';\r\n+import Cookies from 'js-cookie';\r\n+import api from '../api'\r\n \r\n-const BASE_URL = '/service/hospitals';\r\n+// axios 객체 생성\r\n+// const api = axios.create({\r\n+//   baseURL: '/service/hospitals', // 백엔드 컨트롤러에 명시된 기본 URL\r\n+//   withCredentials: true,\r\n+// });\r\n \r\n+// 요청 인터셉터를 사용하여 모든 요청에 JWT 토큰을 추가합니다.\r\n+api.interceptors.request.use((config) => {\r\n+  const token = Cookies.get('jwt');\r\n+  if (token) {\r\n+    config.headers.Authorization = `Bearer ${token}`;\r\n+  }\r\n+  return config;\r\n+});\r\n+\r\n /**\r\n  * 병원 목록을 조회합니다.\r\n  * @param {Array<number>} animal - 필터링할 동물 ID 배열\r\n  * @param {number} pageNum - 페이지 번호\r\n  * @returns {Promise<object>} - 병원 목록 및 페이지 정보\r\n  */\r\n export const list = (animal, pageNum = 1) => {\r\n-  return api.get(BASE_URL, {\r\n+  return api.get('', {\r\n     params: {\r\n       animal: animal?.join(','), // 배열을 쉼표로 구분된 문자열로 전달\r\n       pageNum\r\n     }\r\n   });\r\n };\r\n \r\n // ID로 단일 병원 정보를 가져옵니다.\r\n-export const read = (id) => api.get(`${BASE_URL}/${id}`);\r\n+export const read = (id) => api.get(`/${id}`);\r\n \r\n /**\r\n  * 새 병원을 생성합니다.\r\n  * @param {object} hospitalForm - 병원 폼 데이터\r\n@@ -33,9 +48,9 @@\n   if (thumbnailImageFile) {\r\n     formData.append('thumbnailImageFile', thumbnailImageFile);\r\n   }\r\n \r\n-  return api.post(BASE_URL, formData, {\r\n+  return api.post('', formData, {\r\n     headers: {\r\n       'Content-Type': 'multipart/form-data',\r\n     },\r\n   });\r\n@@ -54,27 +69,27 @@\n   if (thumbnailImageFile) {\r\n     formData.append('thumbnailImageFile', thumbnailImageFile);\r\n   }\r\n \r\n-  return api.put(`${BASE_URL}/${id}`, formData, {\r\n+  return api.put(`/${id}`, formData, {\r\n     headers: {\r\n       'Content-Type': 'multipart/form-data',\r\n     },\r\n   });\r\n };\r\n \r\n // ID로 병원을 삭제합니다.\r\n-export const remove = (id) => api.delete(`${BASE_URL}/${id}`);\r\n+export const remove = (id) => api.delete(`/${id}`);\r\n \r\n // ###################### 리뷰 관련 API ######################\r\n \r\n // 병원의 모든 리뷰 목록을 가져옵니다.\r\n-export const getReviews = (hospitalId) => api.get(`${BASE_URL}/${hospitalId}/reviews`);\r\n+export const getReviews = (hospitalId) => api.get(`/${hospitalId}/reviews`);\r\n \r\n // 병원에 새 리뷰를 추가합니다.\r\n-export const addReview = (hospitalId, review) => api.post(`${BASE_URL}/${hospitalId}/reviews`, review);\r\n+export const addReview = (hospitalId, review) => api.post(`/${hospitalId}/reviews`, review);\r\n \r\n // 리뷰를 수정합니다.\r\n-export const updateReview = (hospitalId, reviewId, review) => api.put(`${BASE_URL}/${hospitalId}/reviews/${reviewId}`, review);\r\n+export const updateReview = (hospitalId, reviewId, review) => api.put(`/${hospitalId}/reviews/${reviewId}`, review);\r\n \r\n // 리뷰를 삭제합니다.\r\n-export const deleteReview = (hospitalId, reviewId) => api.delete(`${BASE_URL}/${hospitalId}/reviews/${reviewId}`);\n+export const deleteReview = (hospitalId, reviewId) => api.delete(`/${hospitalId}/reviews/${reviewId}`);\r\n"
                },
                {
                    "date": 1754845731667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import axios from 'axios';\r\n+import Cookies from 'js-cookie';\r\n+import api from '../api'\r\n+\r\n+\r\n+const BASE_URL = '/service/hospitals';\r\n+// axios 객체 생성\r\n+// const api = axios.create({\r\n+//   baseURL: '/service/hospitals', // 백엔드 컨트롤러에 명시된 기본 URL\r\n+//   withCredentials: true,\r\n+// });\r\n+\r\n+// 요청 인터셉터를 사용하여 모든 요청에 JWT 토큰을 추가합니다.\r\n+api.interceptors.request.use((config) => {\r\n+  const token = Cookies.get('jwt');\r\n+  if (token) {\r\n+    config.headers.Authorization = `Bearer ${token}`;\r\n+  }\r\n+  return config;\r\n+});\r\n+\r\n+/**\r\n+ * 병원 목록을 조회합니다.\r\n+ * @param {Array<number>} animal - 필터링할 동물 ID 배열\r\n+ * @param {number} pageNum - 페이지 번호\r\n+ * @returns {Promise<object>} - 병원 목록 및 페이지 정보\r\n+ */\r\n+export const list = (animal, pageNum = 1) => {\r\n+  return api.get(BASE_URL, {\r\n+    params: {\r\n+      animal: animal?.join(','), // 배열을 쉼표로 구분된 문자열로 전달\r\n+      pageNum\r\n+    }\r\n+  });\r\n+};\r\n+\r\n+// ID로 단일 병원 정보를 가져옵니다.\r\n+export const read = (id) => api.get(`${BASE_URL}/${id}`);\r\n+\r\n+/**\r\n+ * 새 병원을 생성합니다.\r\n+ * @param {object} hospitalForm - 병원 폼 데이터\r\n+ * @param {File} thumbnailImageFile - 썸네일 이미지 파일\r\n+ * @returns {Promise<object>}\r\n+ */\r\n+export const create = (hospitalForm, thumbnailImageFile) => {\r\n+  const formData = new FormData();\r\n+  // hospitalForm 객체를 Blob으로 변환하여 FormData에 추가\r\n+  formData.append('hospitalForm', new Blob([JSON.stringify(hospitalForm)], { type: 'application/json' }));\r\n+  if (thumbnailImageFile) {\r\n+    formData.append('thumbnailImageFile', thumbnailImageFile);\r\n+  }\r\n+\r\n+  return api.post(BASE_URL, formData, {\r\n+    headers: {\r\n+      'Content-Type': 'multipart/form-data',\r\n+    },\r\n+  });\r\n+};\r\n+\r\n+/**\r\n+ * 기존 병원 정보를 업데이트합니다.\r\n+ * @param {number} id - 병원 ID\r\n+ * @param {object} hospitalForm - 병원 폼 데이터\r\n+ * @param {File} thumbnailImageFile - 썸네일 이미지 파일\r\n+ * @returns {Promise<object>}\r\n+ */\r\n+export const update = (id, hospitalForm, thumbnailImageFile) => {\r\n+  const formData = new FormData();\r\n+  formData.append('hospitalForm', new Blob([JSON.stringify(hospitalForm)], { type: 'application/json' }));\r\n+  if (thumbnailImageFile) {\r\n+    formData.append('thumbnailImageFile', thumbnailImageFile);\r\n+  }\r\n+\r\n+  return api.put(`${BASE_URL}/${id}`, formData, {\r\n+    headers: {\r\n+      'Content-Type': 'multipart/form-data',\r\n+    },\r\n+  });\r\n+};\r\n+\r\n+// ID로 병원을 삭제합니다.\r\n+export const remove = (id) => api.delete(`${BASE_URL}/${id}`);\r\n+\r\n+// ###################### 리뷰 관련 API ######################\r\n+\r\n+// 병원의 모든 리뷰 목록을 가져옵니다.\r\n+export const getReviews = (hospitalId) => api.get(`${BASE_URL}/${hospitalId}/reviews`);\r\n+\r\n+// 병원에 새 리뷰를 추가합니다.\r\n+export const addReview = (hospitalId, review) => api.post(`${BASE_URL}/${hospitalId}/reviews`, review);\r\n+\r\n+// 리뷰를 수정합니다.\r\n+export const updateReview = (hospitalId, reviewId, review) => api.put(`${BASE_URL}/${hospitalId}/reviews/${reviewId}`, review);\r\n+\r\n+// 리뷰를 삭제합니다.\r\n+export const deleteReview = (hospitalId, reviewId) => api.delete(`${BASE_URL}/${hospitalId}/reviews/${reviewId}`);\r\n"
                }
            ],
            "date": 1754845117468,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport api from '../api'\r\n\r\n// axios 객체 생성\r\nconst api = axios.create({\r\n  baseURL: '/service/hospitals', // 백엔드 컨트롤러에 명시된 기본 URL\r\n  withCredentials: true,\r\n});\r\n\r\n// 요청 인터셉터를 사용하여 모든 요청에 JWT 토큰을 추가합니다.\r\napi.interceptors.request.use((config) => {\r\n  const token = Cookies.get('jwt');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n/**\r\n * 병원 목록을 조회합니다.\r\n * @param {Array<number>} animal - 필터링할 동물 ID 배열\r\n * @param {number} pageNum - 페이지 번호\r\n * @returns {Promise<object>} - 병원 목록 및 페이지 정보\r\n */\r\nexport const list = (animal, pageNum = 1) => {\r\n  return api.get('', {\r\n    params: {\r\n      animal: animal?.join(','), // 배열을 쉼표로 구분된 문자열로 전달\r\n      pageNum\r\n    }\r\n  });\r\n};\r\n\r\n// ID로 단일 병원 정보를 가져옵니다.\r\nexport const read = (id) => api.get(`/${id}`);\r\n\r\n/**\r\n * 새 병원을 생성합니다.\r\n * @param {object} hospitalForm - 병원 폼 데이터\r\n * @param {File} thumbnailImageFile - 썸네일 이미지 파일\r\n * @returns {Promise<object>}\r\n */\r\nexport const create = (hospitalForm, thumbnailImageFile) => {\r\n  const formData = new FormData();\r\n  // hospitalForm 객체를 Blob으로 변환하여 FormData에 추가\r\n  formData.append('hospitalForm', new Blob([JSON.stringify(hospitalForm)], { type: 'application/json' }));\r\n  if (thumbnailImageFile) {\r\n    formData.append('thumbnailImageFile', thumbnailImageFile);\r\n  }\r\n\r\n  return api.post('', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n/**\r\n * 기존 병원 정보를 업데이트합니다.\r\n * @param {number} id - 병원 ID\r\n * @param {object} hospitalForm - 병원 폼 데이터\r\n * @param {File} thumbnailImageFile - 썸네일 이미지 파일\r\n * @returns {Promise<object>}\r\n */\r\nexport const update = (id, hospitalForm, thumbnailImageFile) => {\r\n  const formData = new FormData();\r\n  formData.append('hospitalForm', new Blob([JSON.stringify(hospitalForm)], { type: 'application/json' }));\r\n  if (thumbnailImageFile) {\r\n    formData.append('thumbnailImageFile', thumbnailImageFile);\r\n  }\r\n\r\n  return api.put(`/${id}`, formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n// ID로 병원을 삭제합니다.\r\nexport const remove = (id) => api.delete(`/${id}`);\r\n\r\n// ###################### 리뷰 관련 API ######################\r\n\r\n// 병원의 모든 리뷰 목록을 가져옵니다.\r\nexport const getReviews = (hospitalId) => api.get(`/${hospitalId}/reviews`);\r\n\r\n// 병원에 새 리뷰를 추가합니다.\r\nexport const addReview = (hospitalId, review) => api.post(`/${hospitalId}/reviews`, review);\r\n\r\n// 리뷰를 수정합니다.\r\nexport const updateReview = (hospitalId, reviewId, review) => api.put(`/${hospitalId}/reviews/${reviewId}`, review);\r\n\r\n// 리뷰를 삭제합니다.\r\nexport const deleteReview = (hospitalId, reviewId) => api.delete(`/${hospitalId}/reviews/${reviewId}`);\r\n"
        }
    ]
}